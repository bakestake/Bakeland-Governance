/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IWormhole {
  export type SignatureStruct = {
    r: BytesLike;
    s: BytesLike;
    v: BigNumberish;
    guardianIndex: BigNumberish;
  };

  export type SignatureStructOutput = [
    r: string,
    s: string,
    v: bigint,
    guardianIndex: bigint
  ] & { r: string; s: string; v: bigint; guardianIndex: bigint };
}

export declare namespace QueryResponse {
  export type ParsedPerChainQueryResponseStruct = {
    chainId: BigNumberish;
    queryType: BigNumberish;
    request: BytesLike;
    response: BytesLike;
  };

  export type ParsedPerChainQueryResponseStructOutput = [
    chainId: bigint,
    queryType: bigint,
    request: string,
    response: string
  ] & { chainId: bigint; queryType: bigint; request: string; response: string };

  export type ParsedQueryResponseStruct = {
    version: BigNumberish;
    senderChainId: BigNumberish;
    nonce: BigNumberish;
    requestId: BytesLike;
    responses: QueryResponse.ParsedPerChainQueryResponseStruct[];
  };

  export type ParsedQueryResponseStructOutput = [
    version: bigint,
    senderChainId: bigint,
    nonce: bigint,
    requestId: string,
    responses: QueryResponse.ParsedPerChainQueryResponseStructOutput[]
  ] & {
    version: bigint;
    senderChainId: bigint;
    nonce: bigint;
    requestId: string;
    responses: QueryResponse.ParsedPerChainQueryResponseStructOutput[];
  };

  export type EthCallDataStruct = {
    contractAddress: AddressLike;
    callData: BytesLike;
    result: BytesLike;
  };

  export type EthCallDataStructOutput = [
    contractAddress: string,
    callData: string,
    result: string
  ] & { contractAddress: string; callData: string; result: string };

  export type EthCallByTimestampQueryResponseStruct = {
    requestTargetBlockIdHint: BytesLike;
    requestFollowingBlockIdHint: BytesLike;
    requestTargetTimestamp: BigNumberish;
    targetBlockNum: BigNumberish;
    targetBlockTime: BigNumberish;
    followingBlockNum: BigNumberish;
    targetBlockHash: BytesLike;
    followingBlockHash: BytesLike;
    followingBlockTime: BigNumberish;
    result: QueryResponse.EthCallDataStruct[];
  };

  export type EthCallByTimestampQueryResponseStructOutput = [
    requestTargetBlockIdHint: string,
    requestFollowingBlockIdHint: string,
    requestTargetTimestamp: bigint,
    targetBlockNum: bigint,
    targetBlockTime: bigint,
    followingBlockNum: bigint,
    targetBlockHash: string,
    followingBlockHash: string,
    followingBlockTime: bigint,
    result: QueryResponse.EthCallDataStructOutput[]
  ] & {
    requestTargetBlockIdHint: string;
    requestFollowingBlockIdHint: string;
    requestTargetTimestamp: bigint;
    targetBlockNum: bigint;
    targetBlockTime: bigint;
    followingBlockNum: bigint;
    targetBlockHash: string;
    followingBlockHash: string;
    followingBlockTime: bigint;
    result: QueryResponse.EthCallDataStructOutput[];
  };

  export type EthCallQueryResponseStruct = {
    requestBlockId: BytesLike;
    blockNum: BigNumberish;
    blockTime: BigNumberish;
    blockHash: BytesLike;
    result: QueryResponse.EthCallDataStruct[];
  };

  export type EthCallQueryResponseStructOutput = [
    requestBlockId: string,
    blockNum: bigint,
    blockTime: bigint,
    blockHash: string,
    result: QueryResponse.EthCallDataStructOutput[]
  ] & {
    requestBlockId: string;
    blockNum: bigint;
    blockTime: bigint;
    blockHash: string;
    result: QueryResponse.EthCallDataStructOutput[];
  };

  export type EthCallWithFinalityQueryResponseStruct = {
    requestBlockId: BytesLike;
    requestFinality: BytesLike;
    blockNum: BigNumberish;
    blockTime: BigNumberish;
    blockHash: BytesLike;
    result: QueryResponse.EthCallDataStruct[];
  };

  export type EthCallWithFinalityQueryResponseStructOutput = [
    requestBlockId: string,
    requestFinality: string,
    blockNum: bigint,
    blockTime: bigint,
    blockHash: string,
    result: QueryResponse.EthCallDataStructOutput[]
  ] & {
    requestBlockId: string;
    requestFinality: string;
    blockNum: bigint;
    blockTime: bigint;
    blockHash: string;
    result: QueryResponse.EthCallDataStructOutput[];
  };
}

export interface QueryResponseInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "QT_ETH_CALL"
      | "QT_ETH_CALL_BY_TIMESTAMP"
      | "QT_ETH_CALL_WITH_FINALITY"
      | "QT_MAX"
      | "QT_SOL_ACCOUNT"
      | "QT_SOL_PDA"
      | "UPGRADE_INTERFACE_VERSION"
      | "VERSION"
      | "__Query_INIT_"
      | "getResponseDigest"
      | "getResponseHash"
      | "parseAndVerifyQueryResponse"
      | "parseEthCallByTimestampQueryResponse"
      | "parseEthCallQueryResponse"
      | "parseEthCallWithFinalityQueryResponse"
      | "proxiableUUID"
      | "responsePrefix"
      | "upgradeToAndCall"
      | "validateBlockNum"
      | "validateBlockTime"
      | "validateChainId"
      | "validateEthCallData"
      | "validateMultipleEthCallData"
      | "verifyQueryResponseSignatures"
      | "wormhole"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Initialized" | "Upgraded"): EventFragment;

  encodeFunctionData(
    functionFragment: "QT_ETH_CALL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "QT_ETH_CALL_BY_TIMESTAMP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "QT_ETH_CALL_WITH_FINALITY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "QT_MAX", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "QT_SOL_ACCOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "QT_SOL_PDA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "__Query_INIT_",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getResponseDigest",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getResponseHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "parseAndVerifyQueryResponse",
    values: [BytesLike, IWormhole.SignatureStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "parseEthCallByTimestampQueryResponse",
    values: [QueryResponse.ParsedPerChainQueryResponseStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "parseEthCallQueryResponse",
    values: [QueryResponse.ParsedPerChainQueryResponseStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "parseEthCallWithFinalityQueryResponse",
    values: [QueryResponse.ParsedPerChainQueryResponseStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "responsePrefix",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validateBlockNum",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateBlockTime",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateChainId",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "validateEthCallData",
    values: [QueryResponse.EthCallDataStruct, AddressLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "validateMultipleEthCallData",
    values: [QueryResponse.EthCallDataStruct[], AddressLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyQueryResponseSignatures",
    values: [BytesLike, IWormhole.SignatureStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "wormhole", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "QT_ETH_CALL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "QT_ETH_CALL_BY_TIMESTAMP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "QT_ETH_CALL_WITH_FINALITY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "QT_MAX", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "QT_SOL_ACCOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "QT_SOL_PDA", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "__Query_INIT_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getResponseDigest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getResponseHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseAndVerifyQueryResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseEthCallByTimestampQueryResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseEthCallQueryResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseEthCallWithFinalityQueryResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "responsePrefix",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateBlockNum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateBlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateEthCallData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateMultipleEthCallData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyQueryResponseSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wormhole", data: BytesLike): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface QueryResponse extends BaseContract {
  connect(runner?: ContractRunner | null): QueryResponse;
  waitForDeployment(): Promise<this>;

  interface: QueryResponseInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  QT_ETH_CALL: TypedContractMethod<[], [bigint], "view">;

  QT_ETH_CALL_BY_TIMESTAMP: TypedContractMethod<[], [bigint], "view">;

  QT_ETH_CALL_WITH_FINALITY: TypedContractMethod<[], [bigint], "view">;

  QT_MAX: TypedContractMethod<[], [bigint], "view">;

  QT_SOL_ACCOUNT: TypedContractMethod<[], [bigint], "view">;

  QT_SOL_PDA: TypedContractMethod<[], [bigint], "view">;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  VERSION: TypedContractMethod<[], [bigint], "view">;

  __Query_INIT_: TypedContractMethod<
    [_wormhole: AddressLike],
    [void],
    "nonpayable"
  >;

  getResponseDigest: TypedContractMethod<
    [response: BytesLike],
    [string],
    "view"
  >;

  getResponseHash: TypedContractMethod<[response: BytesLike], [string], "view">;

  parseAndVerifyQueryResponse: TypedContractMethod<
    [response: BytesLike, signatures: IWormhole.SignatureStruct[]],
    [QueryResponse.ParsedQueryResponseStructOutput],
    "view"
  >;

  parseEthCallByTimestampQueryResponse: TypedContractMethod<
    [pcr: QueryResponse.ParsedPerChainQueryResponseStruct],
    [QueryResponse.EthCallByTimestampQueryResponseStructOutput],
    "view"
  >;

  parseEthCallQueryResponse: TypedContractMethod<
    [pcr: QueryResponse.ParsedPerChainQueryResponseStruct],
    [QueryResponse.EthCallQueryResponseStructOutput],
    "view"
  >;

  parseEthCallWithFinalityQueryResponse: TypedContractMethod<
    [pcr: QueryResponse.ParsedPerChainQueryResponseStruct],
    [QueryResponse.EthCallWithFinalityQueryResponseStructOutput],
    "view"
  >;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  responsePrefix: TypedContractMethod<[], [string], "view">;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  validateBlockNum: TypedContractMethod<
    [_blockNum: BigNumberish, _minBlockNum: BigNumberish],
    [void],
    "view"
  >;

  validateBlockTime: TypedContractMethod<
    [_blockTime: BigNumberish, _minBlockTime: BigNumberish],
    [void],
    "view"
  >;

  validateChainId: TypedContractMethod<
    [chainId: BigNumberish, _validChainIds: BigNumberish[]],
    [void],
    "view"
  >;

  validateEthCallData: TypedContractMethod<
    [
      r: QueryResponse.EthCallDataStruct,
      _expectedContractAddresses: AddressLike[],
      _expectedFunctionSignatures: BytesLike[]
    ],
    [void],
    "view"
  >;

  validateMultipleEthCallData: TypedContractMethod<
    [
      r: QueryResponse.EthCallDataStruct[],
      _expectedContractAddresses: AddressLike[],
      _expectedFunctionSignatures: BytesLike[]
    ],
    [void],
    "view"
  >;

  verifyQueryResponseSignatures: TypedContractMethod<
    [response: BytesLike, signatures: IWormhole.SignatureStruct[]],
    [void],
    "view"
  >;

  wormhole: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "QT_ETH_CALL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "QT_ETH_CALL_BY_TIMESTAMP"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "QT_ETH_CALL_WITH_FINALITY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "QT_MAX"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "QT_SOL_ACCOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "QT_SOL_PDA"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "__Query_INIT_"
  ): TypedContractMethod<[_wormhole: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getResponseDigest"
  ): TypedContractMethod<[response: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getResponseHash"
  ): TypedContractMethod<[response: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "parseAndVerifyQueryResponse"
  ): TypedContractMethod<
    [response: BytesLike, signatures: IWormhole.SignatureStruct[]],
    [QueryResponse.ParsedQueryResponseStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "parseEthCallByTimestampQueryResponse"
  ): TypedContractMethod<
    [pcr: QueryResponse.ParsedPerChainQueryResponseStruct],
    [QueryResponse.EthCallByTimestampQueryResponseStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "parseEthCallQueryResponse"
  ): TypedContractMethod<
    [pcr: QueryResponse.ParsedPerChainQueryResponseStruct],
    [QueryResponse.EthCallQueryResponseStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "parseEthCallWithFinalityQueryResponse"
  ): TypedContractMethod<
    [pcr: QueryResponse.ParsedPerChainQueryResponseStruct],
    [QueryResponse.EthCallWithFinalityQueryResponseStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "responsePrefix"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "validateBlockNum"
  ): TypedContractMethod<
    [_blockNum: BigNumberish, _minBlockNum: BigNumberish],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "validateBlockTime"
  ): TypedContractMethod<
    [_blockTime: BigNumberish, _minBlockTime: BigNumberish],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "validateChainId"
  ): TypedContractMethod<
    [chainId: BigNumberish, _validChainIds: BigNumberish[]],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "validateEthCallData"
  ): TypedContractMethod<
    [
      r: QueryResponse.EthCallDataStruct,
      _expectedContractAddresses: AddressLike[],
      _expectedFunctionSignatures: BytesLike[]
    ],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "validateMultipleEthCallData"
  ): TypedContractMethod<
    [
      r: QueryResponse.EthCallDataStruct[],
      _expectedContractAddresses: AddressLike[],
      _expectedFunctionSignatures: BytesLike[]
    ],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyQueryResponseSignatures"
  ): TypedContractMethod<
    [response: BytesLike, signatures: IWormhole.SignatureStruct[]],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "wormhole"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
