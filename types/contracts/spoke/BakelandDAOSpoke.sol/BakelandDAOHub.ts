/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IWormhole {
  export type SignatureStruct = {
    r: BytesLike;
    s: BytesLike;
    v: BigNumberish;
    guardianIndex: BigNumberish;
  };

  export type SignatureStructOutput = [
    r: string,
    s: string,
    v: bigint,
    guardianIndex: bigint
  ] & { r: string; s: string; v: bigint; guardianIndex: bigint };
}

export declare namespace QueryResponse {
  export type ParsedPerChainQueryResponseStruct = {
    chainId: BigNumberish;
    queryType: BigNumberish;
    request: BytesLike;
    response: BytesLike;
  };

  export type ParsedPerChainQueryResponseStructOutput = [
    chainId: bigint,
    queryType: bigint,
    request: string,
    response: string
  ] & { chainId: bigint; queryType: bigint; request: string; response: string };

  export type ParsedQueryResponseStruct = {
    version: BigNumberish;
    senderChainId: BigNumberish;
    nonce: BigNumberish;
    requestId: BytesLike;
    responses: QueryResponse.ParsedPerChainQueryResponseStruct[];
  };

  export type ParsedQueryResponseStructOutput = [
    version: bigint,
    senderChainId: bigint,
    nonce: bigint,
    requestId: string,
    responses: QueryResponse.ParsedPerChainQueryResponseStructOutput[]
  ] & {
    version: bigint;
    senderChainId: bigint;
    nonce: bigint;
    requestId: string;
    responses: QueryResponse.ParsedPerChainQueryResponseStructOutput[];
  };

  export type EthCallDataStruct = {
    contractAddress: AddressLike;
    callData: BytesLike;
    result: BytesLike;
  };

  export type EthCallDataStructOutput = [
    contractAddress: string,
    callData: string,
    result: string
  ] & { contractAddress: string; callData: string; result: string };

  export type EthCallByTimestampQueryResponseStruct = {
    requestTargetBlockIdHint: BytesLike;
    requestFollowingBlockIdHint: BytesLike;
    requestTargetTimestamp: BigNumberish;
    targetBlockNum: BigNumberish;
    targetBlockTime: BigNumberish;
    followingBlockNum: BigNumberish;
    targetBlockHash: BytesLike;
    followingBlockHash: BytesLike;
    followingBlockTime: BigNumberish;
    result: QueryResponse.EthCallDataStruct[];
  };

  export type EthCallByTimestampQueryResponseStructOutput = [
    requestTargetBlockIdHint: string,
    requestFollowingBlockIdHint: string,
    requestTargetTimestamp: bigint,
    targetBlockNum: bigint,
    targetBlockTime: bigint,
    followingBlockNum: bigint,
    targetBlockHash: string,
    followingBlockHash: string,
    followingBlockTime: bigint,
    result: QueryResponse.EthCallDataStructOutput[]
  ] & {
    requestTargetBlockIdHint: string;
    requestFollowingBlockIdHint: string;
    requestTargetTimestamp: bigint;
    targetBlockNum: bigint;
    targetBlockTime: bigint;
    followingBlockNum: bigint;
    targetBlockHash: string;
    followingBlockHash: string;
    followingBlockTime: bigint;
    result: QueryResponse.EthCallDataStructOutput[];
  };

  export type EthCallQueryResponseStruct = {
    requestBlockId: BytesLike;
    blockNum: BigNumberish;
    blockTime: BigNumberish;
    blockHash: BytesLike;
    result: QueryResponse.EthCallDataStruct[];
  };

  export type EthCallQueryResponseStructOutput = [
    requestBlockId: string,
    blockNum: bigint,
    blockTime: bigint,
    blockHash: string,
    result: QueryResponse.EthCallDataStructOutput[]
  ] & {
    requestBlockId: string;
    blockNum: bigint;
    blockTime: bigint;
    blockHash: string;
    result: QueryResponse.EthCallDataStructOutput[];
  };

  export type EthCallWithFinalityQueryResponseStruct = {
    requestBlockId: BytesLike;
    requestFinality: BytesLike;
    blockNum: BigNumberish;
    blockTime: BigNumberish;
    blockHash: BytesLike;
    result: QueryResponse.EthCallDataStruct[];
  };

  export type EthCallWithFinalityQueryResponseStructOutput = [
    requestBlockId: string,
    requestFinality: string,
    blockNum: bigint,
    blockTime: bigint,
    blockHash: string,
    result: QueryResponse.EthCallDataStructOutput[]
  ] & {
    requestBlockId: string;
    requestFinality: string;
    blockNum: bigint;
    blockTime: bigint;
    blockHash: string;
    result: QueryResponse.EthCallDataStructOutput[];
  };
}

export interface BakelandDAOHubInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BALLOT_TYPEHASH"
      | "CLOCK_MODE"
      | "COUNTING_MODE"
      | "EXTENDED_BALLOT_TYPEHASH"
      | "QT_ETH_CALL"
      | "QT_ETH_CALL_BY_TIMESTAMP"
      | "QT_ETH_CALL_WITH_FINALITY"
      | "QT_MAX"
      | "QT_SOL_ACCOUNT"
      | "QT_SOL_PDA"
      | "UPGRADE_INTERFACE_VERSION"
      | "VERSION"
      | "__Query_INIT_"
      | "_chainId"
      | "_hubAddress"
      | "_hubChainId"
      | "_noOfChains"
      | "_wormhole"
      | "cancel"
      | "castVote(uint256,uint8)"
      | "castVote(uint256,uint8,bytes,(bytes32,bytes32,uint8,uint8)[])"
      | "castVoteBySig(uint256,uint8,address,bytes,bytes,(bytes32,bytes32,uint8,uint8)[])"
      | "castVoteBySig(uint256,uint8,address,bytes)"
      | "castVoteWithReason(uint256,uint8,string)"
      | "castVoteWithReason(uint256,uint8,string,bytes,(bytes32,bytes32,uint8,uint8)[])"
      | "castVoteWithReasonAndParams(uint256,uint8,string,bytes)"
      | "castVoteWithReasonAndParams(uint256,uint8,string,bytes,bytes,(bytes32,bytes32,uint8,uint8)[])"
      | "castVoteWithReasonAndParamsBySig(uint256,uint8,address,string,bytes,bytes,bytes,(bytes32,bytes32,uint8,uint8)[])"
      | "castVoteWithReasonAndParamsBySig(uint256,uint8,address,string,bytes,bytes)"
      | "changeHubAddress"
      | "clock"
      | "eip712Domain"
      | "execute"
      | "getResponseDigest"
      | "getResponseHash"
      | "getVotes"
      | "getVotesWithParams"
      | "hasVoted"
      | "hasVotedSelector"
      | "hashProposal"
      | "initialize"
      | "name"
      | "nonces"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "onERC721Received"
      | "owner"
      | "parseAndVerifyQueryResponse"
      | "parseEthCallByTimestampQueryResponse"
      | "parseEthCallQueryResponse"
      | "parseEthCallWithFinalityQueryResponse"
      | "proposalDeadline"
      | "proposalEta"
      | "proposalNeedsQueuing"
      | "proposalProposer"
      | "proposalSnapshot"
      | "proposalThreshold"
      | "proposalVotes"
      | "propose"
      | "proxiableUUID"
      | "queue"
      | "quorum"
      | "quorumDenominator"
      | "quorumNumerator(uint256)"
      | "quorumNumerator()"
      | "receiveWormholeMessages"
      | "relay"
      | "renounceOwnership"
      | "responsePrefix"
      | "setProposalThreshold"
      | "setVotingDelay"
      | "setVotingPeriod"
      | "state"
      | "supportsInterface"
      | "timelock"
      | "token"
      | "transferOwnership"
      | "updateQuorumNumerator"
      | "updateTimelock"
      | "upgradeToAndCall"
      | "validateBlockNum"
      | "validateBlockTime"
      | "validateChainId"
      | "validateEthCallData"
      | "validateMultipleEthCallData"
      | "verifyQueryResponseSignatures"
      | "version"
      | "votingDelay"
      | "votingPeriod"
      | "wormhole"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EIP712DomainChanged"
      | "Initialized"
      | "OwnershipTransferred"
      | "ProposalCanceled"
      | "ProposalCreated"
      | "ProposalExecuted"
      | "ProposalQueued"
      | "ProposalThresholdSet"
      | "QuorumNumeratorUpdated"
      | "TimelockChange"
      | "Upgraded"
      | "VoteCast"
      | "VoteCastWithParams"
      | "VotingDelaySet"
      | "VotingPeriodSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BALLOT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CLOCK_MODE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COUNTING_MODE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EXTENDED_BALLOT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "QT_ETH_CALL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "QT_ETH_CALL_BY_TIMESTAMP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "QT_ETH_CALL_WITH_FINALITY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "QT_MAX", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "QT_SOL_ACCOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "QT_SOL_PDA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "__Query_INIT_",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "_chainId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_hubAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_hubChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_noOfChains",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_wormhole", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [AddressLike[], BigNumberish[], BytesLike[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote(uint256,uint8)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote(uint256,uint8,bytes,(bytes32,bytes32,uint8,uint8)[])",
    values: [BigNumberish, BigNumberish, BytesLike, IWormhole.SignatureStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteBySig(uint256,uint8,address,bytes,bytes,(bytes32,bytes32,uint8,uint8)[])",
    values: [
      BigNumberish,
      BigNumberish,
      AddressLike,
      BytesLike,
      BytesLike,
      IWormhole.SignatureStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteBySig(uint256,uint8,address,bytes)",
    values: [BigNumberish, BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteWithReason(uint256,uint8,string)",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteWithReason(uint256,uint8,string,bytes,(bytes32,bytes32,uint8,uint8)[])",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      BytesLike,
      IWormhole.SignatureStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteWithReasonAndParams(uint256,uint8,string,bytes)",
    values: [BigNumberish, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteWithReasonAndParams(uint256,uint8,string,bytes,bytes,(bytes32,bytes32,uint8,uint8)[])",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      BytesLike,
      BytesLike,
      IWormhole.SignatureStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteWithReasonAndParamsBySig(uint256,uint8,address,string,bytes,bytes,bytes,(bytes32,bytes32,uint8,uint8)[])",
    values: [
      BigNumberish,
      BigNumberish,
      AddressLike,
      string,
      BytesLike,
      BytesLike,
      BytesLike,
      IWormhole.SignatureStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteWithReasonAndParamsBySig(uint256,uint8,address,string,bytes,bytes)",
    values: [
      BigNumberish,
      BigNumberish,
      AddressLike,
      string,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "changeHubAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "clock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [AddressLike[], BigNumberish[], BytesLike[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getResponseDigest",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getResponseHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotes",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotesWithParams",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVotedSelector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hashProposal",
    values: [AddressLike[], BigNumberish[], BytesLike[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "parseAndVerifyQueryResponse",
    values: [BytesLike, IWormhole.SignatureStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "parseEthCallByTimestampQueryResponse",
    values: [QueryResponse.ParsedPerChainQueryResponseStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "parseEthCallQueryResponse",
    values: [QueryResponse.ParsedPerChainQueryResponseStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "parseEthCallWithFinalityQueryResponse",
    values: [QueryResponse.ParsedPerChainQueryResponseStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalDeadline",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalEta",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalNeedsQueuing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalProposer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalSnapshot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalVotes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [AddressLike[], BigNumberish[], BytesLike[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queue",
    values: [AddressLike[], BigNumberish[], BytesLike[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "quorum",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quorumDenominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quorumNumerator(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quorumNumerator()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receiveWormholeMessages",
    values: [BytesLike, BytesLike[], BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "relay",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "responsePrefix",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setProposalThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVotingDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVotingPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "state", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "timelock", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateQuorumNumerator",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTimelock",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validateBlockNum",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateBlockTime",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateChainId",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "validateEthCallData",
    values: [QueryResponse.EthCallDataStruct, AddressLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "validateMultipleEthCallData",
    values: [QueryResponse.EthCallDataStruct[], AddressLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyQueryResponseSignatures",
    values: [BytesLike, IWormhole.SignatureStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "votingDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "wormhole", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "BALLOT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "CLOCK_MODE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "COUNTING_MODE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EXTENDED_BALLOT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "QT_ETH_CALL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "QT_ETH_CALL_BY_TIMESTAMP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "QT_ETH_CALL_WITH_FINALITY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "QT_MAX", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "QT_SOL_ACCOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "QT_SOL_PDA", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "__Query_INIT_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_chainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_hubAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_hubChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_noOfChains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_wormhole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "castVote(uint256,uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVote(uint256,uint8,bytes,(bytes32,bytes32,uint8,uint8)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVoteBySig(uint256,uint8,address,bytes,bytes,(bytes32,bytes32,uint8,uint8)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVoteBySig(uint256,uint8,address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVoteWithReason(uint256,uint8,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVoteWithReason(uint256,uint8,string,bytes,(bytes32,bytes32,uint8,uint8)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVoteWithReasonAndParams(uint256,uint8,string,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVoteWithReasonAndParams(uint256,uint8,string,bytes,bytes,(bytes32,bytes32,uint8,uint8)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVoteWithReasonAndParamsBySig(uint256,uint8,address,string,bytes,bytes,bytes,(bytes32,bytes32,uint8,uint8)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVoteWithReasonAndParamsBySig(uint256,uint8,address,string,bytes,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeHubAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "clock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getResponseDigest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getResponseHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVotes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVotesWithParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasVotedSelector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "parseAndVerifyQueryResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseEthCallByTimestampQueryResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseEthCallQueryResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseEthCallWithFinalityQueryResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalEta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalNeedsQueuing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalProposer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalSnapshot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "queue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quorum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quorumDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quorumNumerator(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quorumNumerator()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveWormholeMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "relay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "responsePrefix",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProposalThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVotingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVotingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timelock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateQuorumNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateBlockNum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateBlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateEthCallData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateMultipleEthCallData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyQueryResponseSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wormhole", data: BytesLike): Result;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCanceledEvent {
  export type InputTuple = [proposalId: BigNumberish];
  export type OutputTuple = [proposalId: bigint];
  export interface OutputObject {
    proposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCreatedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    proposer: AddressLike,
    targets: AddressLike[],
    values: BigNumberish[],
    signatures: string[],
    calldatas: BytesLike[],
    voteStart: BigNumberish,
    voteEnd: BigNumberish,
    description: string
  ];
  export type OutputTuple = [
    proposalId: bigint,
    proposer: string,
    targets: string[],
    values: bigint[],
    signatures: string[],
    calldatas: string[],
    voteStart: bigint,
    voteEnd: bigint,
    description: string
  ];
  export interface OutputObject {
    proposalId: bigint;
    proposer: string;
    targets: string[];
    values: bigint[];
    signatures: string[];
    calldatas: string[];
    voteStart: bigint;
    voteEnd: bigint;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalExecutedEvent {
  export type InputTuple = [proposalId: BigNumberish];
  export type OutputTuple = [proposalId: bigint];
  export interface OutputObject {
    proposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalQueuedEvent {
  export type InputTuple = [proposalId: BigNumberish, etaSeconds: BigNumberish];
  export type OutputTuple = [proposalId: bigint, etaSeconds: bigint];
  export interface OutputObject {
    proposalId: bigint;
    etaSeconds: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalThresholdSetEvent {
  export type InputTuple = [
    oldProposalThreshold: BigNumberish,
    newProposalThreshold: BigNumberish
  ];
  export type OutputTuple = [
    oldProposalThreshold: bigint,
    newProposalThreshold: bigint
  ];
  export interface OutputObject {
    oldProposalThreshold: bigint;
    newProposalThreshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QuorumNumeratorUpdatedEvent {
  export type InputTuple = [
    oldQuorumNumerator: BigNumberish,
    newQuorumNumerator: BigNumberish
  ];
  export type OutputTuple = [
    oldQuorumNumerator: bigint,
    newQuorumNumerator: bigint
  ];
  export interface OutputObject {
    oldQuorumNumerator: bigint;
    newQuorumNumerator: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TimelockChangeEvent {
  export type InputTuple = [oldTimelock: AddressLike, newTimelock: AddressLike];
  export type OutputTuple = [oldTimelock: string, newTimelock: string];
  export interface OutputObject {
    oldTimelock: string;
    newTimelock: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    voter: AddressLike,
    proposalId: BigNumberish,
    support: BigNumberish,
    weight: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    voter: string,
    proposalId: bigint,
    support: bigint,
    weight: bigint,
    reason: string
  ];
  export interface OutputObject {
    voter: string;
    proposalId: bigint;
    support: bigint;
    weight: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastWithParamsEvent {
  export type InputTuple = [
    voter: AddressLike,
    proposalId: BigNumberish,
    support: BigNumberish,
    weight: BigNumberish,
    reason: string,
    params: BytesLike
  ];
  export type OutputTuple = [
    voter: string,
    proposalId: bigint,
    support: bigint,
    weight: bigint,
    reason: string,
    params: string
  ];
  export interface OutputObject {
    voter: string;
    proposalId: bigint;
    support: bigint;
    weight: bigint;
    reason: string;
    params: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingDelaySetEvent {
  export type InputTuple = [
    oldVotingDelay: BigNumberish,
    newVotingDelay: BigNumberish
  ];
  export type OutputTuple = [oldVotingDelay: bigint, newVotingDelay: bigint];
  export interface OutputObject {
    oldVotingDelay: bigint;
    newVotingDelay: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingPeriodSetEvent {
  export type InputTuple = [
    oldVotingPeriod: BigNumberish,
    newVotingPeriod: BigNumberish
  ];
  export type OutputTuple = [oldVotingPeriod: bigint, newVotingPeriod: bigint];
  export interface OutputObject {
    oldVotingPeriod: bigint;
    newVotingPeriod: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BakelandDAOHub extends BaseContract {
  connect(runner?: ContractRunner | null): BakelandDAOHub;
  waitForDeployment(): Promise<this>;

  interface: BakelandDAOHubInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BALLOT_TYPEHASH: TypedContractMethod<[], [string], "view">;

  CLOCK_MODE: TypedContractMethod<[], [string], "view">;

  COUNTING_MODE: TypedContractMethod<[], [string], "view">;

  EXTENDED_BALLOT_TYPEHASH: TypedContractMethod<[], [string], "view">;

  QT_ETH_CALL: TypedContractMethod<[], [bigint], "view">;

  QT_ETH_CALL_BY_TIMESTAMP: TypedContractMethod<[], [bigint], "view">;

  QT_ETH_CALL_WITH_FINALITY: TypedContractMethod<[], [bigint], "view">;

  QT_MAX: TypedContractMethod<[], [bigint], "view">;

  QT_SOL_ACCOUNT: TypedContractMethod<[], [bigint], "view">;

  QT_SOL_PDA: TypedContractMethod<[], [bigint], "view">;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  VERSION: TypedContractMethod<[], [bigint], "view">;

  __Query_INIT_: TypedContractMethod<
    [_wormhole: AddressLike],
    [void],
    "nonpayable"
  >;

  _chainId: TypedContractMethod<[], [bigint], "view">;

  _hubAddress: TypedContractMethod<[], [string], "view">;

  _hubChainId: TypedContractMethod<[], [bigint], "view">;

  _noOfChains: TypedContractMethod<[], [bigint], "view">;

  _wormhole: TypedContractMethod<[], [string], "view">;

  cancel: TypedContractMethod<
    [
      targets: AddressLike[],
      values: BigNumberish[],
      calldatas: BytesLike[],
      descriptionHash: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  "castVote(uint256,uint8)": TypedContractMethod<
    [proposalId: BigNumberish, support: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  "castVote(uint256,uint8,bytes,(bytes32,bytes32,uint8,uint8)[])": TypedContractMethod<
    [
      proposalId: BigNumberish,
      support: BigNumberish,
      response: BytesLike,
      signatures: IWormhole.SignatureStruct[]
    ],
    [bigint],
    "nonpayable"
  >;

  "castVoteBySig(uint256,uint8,address,bytes,bytes,(bytes32,bytes32,uint8,uint8)[])": TypedContractMethod<
    [
      proposalId: BigNumberish,
      support: BigNumberish,
      voter: AddressLike,
      signature: BytesLike,
      response: BytesLike,
      signatures: IWormhole.SignatureStruct[]
    ],
    [bigint],
    "nonpayable"
  >;

  "castVoteBySig(uint256,uint8,address,bytes)": TypedContractMethod<
    [
      proposalId: BigNumberish,
      support: BigNumberish,
      voter: AddressLike,
      signature: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  "castVoteWithReason(uint256,uint8,string)": TypedContractMethod<
    [proposalId: BigNumberish, support: BigNumberish, reason: string],
    [bigint],
    "nonpayable"
  >;

  "castVoteWithReason(uint256,uint8,string,bytes,(bytes32,bytes32,uint8,uint8)[])": TypedContractMethod<
    [
      proposalId: BigNumberish,
      support: BigNumberish,
      reason: string,
      response: BytesLike,
      signatures: IWormhole.SignatureStruct[]
    ],
    [bigint],
    "nonpayable"
  >;

  "castVoteWithReasonAndParams(uint256,uint8,string,bytes)": TypedContractMethod<
    [
      proposalId: BigNumberish,
      support: BigNumberish,
      reason: string,
      params: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  "castVoteWithReasonAndParams(uint256,uint8,string,bytes,bytes,(bytes32,bytes32,uint8,uint8)[])": TypedContractMethod<
    [
      proposalId: BigNumberish,
      support: BigNumberish,
      reason: string,
      params: BytesLike,
      response: BytesLike,
      signatures: IWormhole.SignatureStruct[]
    ],
    [bigint],
    "nonpayable"
  >;

  "castVoteWithReasonAndParamsBySig(uint256,uint8,address,string,bytes,bytes,bytes,(bytes32,bytes32,uint8,uint8)[])": TypedContractMethod<
    [
      proposalId: BigNumberish,
      support: BigNumberish,
      voter: AddressLike,
      reason: string,
      params: BytesLike,
      signature: BytesLike,
      response: BytesLike,
      signatures: IWormhole.SignatureStruct[]
    ],
    [bigint],
    "nonpayable"
  >;

  "castVoteWithReasonAndParamsBySig(uint256,uint8,address,string,bytes,bytes)": TypedContractMethod<
    [
      proposalId: BigNumberish,
      support: BigNumberish,
      voter: AddressLike,
      reason: string,
      params: BytesLike,
      signature: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  changeHubAddress: TypedContractMethod<
    [newHubContractAddress: BytesLike],
    [void],
    "nonpayable"
  >;

  clock: TypedContractMethod<[], [bigint], "view">;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  execute: TypedContractMethod<
    [
      targets: AddressLike[],
      values: BigNumberish[],
      calldatas: BytesLike[],
      descriptionHash: BytesLike
    ],
    [bigint],
    "payable"
  >;

  getResponseDigest: TypedContractMethod<
    [response: BytesLike],
    [string],
    "view"
  >;

  getResponseHash: TypedContractMethod<[response: BytesLike], [string], "view">;

  getVotes: TypedContractMethod<
    [account: AddressLike, timepoint: BigNumberish],
    [bigint],
    "view"
  >;

  getVotesWithParams: TypedContractMethod<
    [account: AddressLike, timepoint: BigNumberish, params: BytesLike],
    [bigint],
    "view"
  >;

  hasVoted: TypedContractMethod<
    [proposalId: BigNumberish, account: AddressLike],
    [boolean],
    "view"
  >;

  hasVotedSelector: TypedContractMethod<[], [string], "view">;

  hashProposal: TypedContractMethod<
    [
      targets: AddressLike[],
      values: BigNumberish[],
      calldatas: BytesLike[],
      descriptionHash: BytesLike
    ],
    [bigint],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _token: AddressLike,
      _timelock: AddressLike,
      _wormholeRelayer: AddressLike,
      _hubDaoContract: BytesLike,
      _curChainId: BigNumberish,
      hubChainId: BigNumberish,
      noOfChains: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  nonces: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  onERC1155BatchReceived: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  onERC1155Received: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  parseAndVerifyQueryResponse: TypedContractMethod<
    [response: BytesLike, signatures: IWormhole.SignatureStruct[]],
    [QueryResponse.ParsedQueryResponseStructOutput],
    "view"
  >;

  parseEthCallByTimestampQueryResponse: TypedContractMethod<
    [pcr: QueryResponse.ParsedPerChainQueryResponseStruct],
    [QueryResponse.EthCallByTimestampQueryResponseStructOutput],
    "view"
  >;

  parseEthCallQueryResponse: TypedContractMethod<
    [pcr: QueryResponse.ParsedPerChainQueryResponseStruct],
    [QueryResponse.EthCallQueryResponseStructOutput],
    "view"
  >;

  parseEthCallWithFinalityQueryResponse: TypedContractMethod<
    [pcr: QueryResponse.ParsedPerChainQueryResponseStruct],
    [QueryResponse.EthCallWithFinalityQueryResponseStructOutput],
    "view"
  >;

  proposalDeadline: TypedContractMethod<
    [proposalId: BigNumberish],
    [bigint],
    "view"
  >;

  proposalEta: TypedContractMethod<
    [proposalId: BigNumberish],
    [bigint],
    "view"
  >;

  proposalNeedsQueuing: TypedContractMethod<
    [proposalId: BigNumberish],
    [boolean],
    "view"
  >;

  proposalProposer: TypedContractMethod<
    [proposalId: BigNumberish],
    [string],
    "view"
  >;

  proposalSnapshot: TypedContractMethod<
    [proposalId: BigNumberish],
    [bigint],
    "view"
  >;

  proposalThreshold: TypedContractMethod<[], [bigint], "view">;

  proposalVotes: TypedContractMethod<
    [proposalId: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        againstVotes: bigint;
        forVotes: bigint;
        abstainVotes: bigint;
      }
    ],
    "view"
  >;

  propose: TypedContractMethod<
    [
      targets: AddressLike[],
      values: BigNumberish[],
      calldatas: BytesLike[],
      description: string
    ],
    [bigint],
    "view"
  >;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  queue: TypedContractMethod<
    [
      targets: AddressLike[],
      values: BigNumberish[],
      calldatas: BytesLike[],
      descriptionHash: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  quorum: TypedContractMethod<[blockNumber: BigNumberish], [bigint], "view">;

  quorumDenominator: TypedContractMethod<[], [bigint], "view">;

  "quorumNumerator(uint256)": TypedContractMethod<
    [timepoint: BigNumberish],
    [bigint],
    "view"
  >;

  "quorumNumerator()": TypedContractMethod<[], [bigint], "view">;

  receiveWormholeMessages: TypedContractMethod<
    [
      payload: BytesLike,
      arg1: BytesLike[],
      sourceAddress: BytesLike,
      sourceChain: BigNumberish,
      arg4: BytesLike
    ],
    [void],
    "payable"
  >;

  relay: TypedContractMethod<
    [target: AddressLike, value: BigNumberish, data: BytesLike],
    [void],
    "payable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  responsePrefix: TypedContractMethod<[], [string], "view">;

  setProposalThreshold: TypedContractMethod<
    [newProposalThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  setVotingDelay: TypedContractMethod<
    [newVotingDelay: BigNumberish],
    [void],
    "nonpayable"
  >;

  setVotingPeriod: TypedContractMethod<
    [newVotingPeriod: BigNumberish],
    [void],
    "nonpayable"
  >;

  state: TypedContractMethod<[proposalId: BigNumberish], [bigint], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  timelock: TypedContractMethod<[], [string], "view">;

  token: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateQuorumNumerator: TypedContractMethod<
    [newQuorumNumerator: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateTimelock: TypedContractMethod<
    [newTimelock: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  validateBlockNum: TypedContractMethod<
    [_blockNum: BigNumberish, _minBlockNum: BigNumberish],
    [void],
    "view"
  >;

  validateBlockTime: TypedContractMethod<
    [_blockTime: BigNumberish, _minBlockTime: BigNumberish],
    [void],
    "view"
  >;

  validateChainId: TypedContractMethod<
    [chainId: BigNumberish, _validChainIds: BigNumberish[]],
    [void],
    "view"
  >;

  validateEthCallData: TypedContractMethod<
    [
      r: QueryResponse.EthCallDataStruct,
      _expectedContractAddresses: AddressLike[],
      _expectedFunctionSignatures: BytesLike[]
    ],
    [void],
    "view"
  >;

  validateMultipleEthCallData: TypedContractMethod<
    [
      r: QueryResponse.EthCallDataStruct[],
      _expectedContractAddresses: AddressLike[],
      _expectedFunctionSignatures: BytesLike[]
    ],
    [void],
    "view"
  >;

  verifyQueryResponseSignatures: TypedContractMethod<
    [response: BytesLike, signatures: IWormhole.SignatureStruct[]],
    [void],
    "view"
  >;

  version: TypedContractMethod<[], [string], "view">;

  votingDelay: TypedContractMethod<[], [bigint], "view">;

  votingPeriod: TypedContractMethod<[], [bigint], "view">;

  wormhole: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BALLOT_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CLOCK_MODE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "COUNTING_MODE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "EXTENDED_BALLOT_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "QT_ETH_CALL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "QT_ETH_CALL_BY_TIMESTAMP"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "QT_ETH_CALL_WITH_FINALITY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "QT_MAX"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "QT_SOL_ACCOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "QT_SOL_PDA"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "__Query_INIT_"
  ): TypedContractMethod<[_wormhole: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "_chainId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_hubAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_hubChainId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_noOfChains"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_wormhole"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "cancel"
  ): TypedContractMethod<
    [
      targets: AddressLike[],
      values: BigNumberish[],
      calldatas: BytesLike[],
      descriptionHash: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVote(uint256,uint8)"
  ): TypedContractMethod<
    [proposalId: BigNumberish, support: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVote(uint256,uint8,bytes,(bytes32,bytes32,uint8,uint8)[])"
  ): TypedContractMethod<
    [
      proposalId: BigNumberish,
      support: BigNumberish,
      response: BytesLike,
      signatures: IWormhole.SignatureStruct[]
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVoteBySig(uint256,uint8,address,bytes,bytes,(bytes32,bytes32,uint8,uint8)[])"
  ): TypedContractMethod<
    [
      proposalId: BigNumberish,
      support: BigNumberish,
      voter: AddressLike,
      signature: BytesLike,
      response: BytesLike,
      signatures: IWormhole.SignatureStruct[]
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVoteBySig(uint256,uint8,address,bytes)"
  ): TypedContractMethod<
    [
      proposalId: BigNumberish,
      support: BigNumberish,
      voter: AddressLike,
      signature: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVoteWithReason(uint256,uint8,string)"
  ): TypedContractMethod<
    [proposalId: BigNumberish, support: BigNumberish, reason: string],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVoteWithReason(uint256,uint8,string,bytes,(bytes32,bytes32,uint8,uint8)[])"
  ): TypedContractMethod<
    [
      proposalId: BigNumberish,
      support: BigNumberish,
      reason: string,
      response: BytesLike,
      signatures: IWormhole.SignatureStruct[]
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVoteWithReasonAndParams(uint256,uint8,string,bytes)"
  ): TypedContractMethod<
    [
      proposalId: BigNumberish,
      support: BigNumberish,
      reason: string,
      params: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVoteWithReasonAndParams(uint256,uint8,string,bytes,bytes,(bytes32,bytes32,uint8,uint8)[])"
  ): TypedContractMethod<
    [
      proposalId: BigNumberish,
      support: BigNumberish,
      reason: string,
      params: BytesLike,
      response: BytesLike,
      signatures: IWormhole.SignatureStruct[]
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVoteWithReasonAndParamsBySig(uint256,uint8,address,string,bytes,bytes,bytes,(bytes32,bytes32,uint8,uint8)[])"
  ): TypedContractMethod<
    [
      proposalId: BigNumberish,
      support: BigNumberish,
      voter: AddressLike,
      reason: string,
      params: BytesLike,
      signature: BytesLike,
      response: BytesLike,
      signatures: IWormhole.SignatureStruct[]
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVoteWithReasonAndParamsBySig(uint256,uint8,address,string,bytes,bytes)"
  ): TypedContractMethod<
    [
      proposalId: BigNumberish,
      support: BigNumberish,
      voter: AddressLike,
      reason: string,
      params: BytesLike,
      signature: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeHubAddress"
  ): TypedContractMethod<
    [newHubContractAddress: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "clock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<
    [
      targets: AddressLike[],
      values: BigNumberish[],
      calldatas: BytesLike[],
      descriptionHash: BytesLike
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getResponseDigest"
  ): TypedContractMethod<[response: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getResponseHash"
  ): TypedContractMethod<[response: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getVotes"
  ): TypedContractMethod<
    [account: AddressLike, timepoint: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVotesWithParams"
  ): TypedContractMethod<
    [account: AddressLike, timepoint: BigNumberish, params: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<
    [proposalId: BigNumberish, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasVotedSelector"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "hashProposal"
  ): TypedContractMethod<
    [
      targets: AddressLike[],
      values: BigNumberish[],
      calldatas: BytesLike[],
      descriptionHash: BytesLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _timelock: AddressLike,
      _wormholeRelayer: AddressLike,
      _hubDaoContract: BytesLike,
      _curChainId: BigNumberish,
      hubChainId: BigNumberish,
      noOfChains: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "onERC1155BatchReceived"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onERC1155Received"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "parseAndVerifyQueryResponse"
  ): TypedContractMethod<
    [response: BytesLike, signatures: IWormhole.SignatureStruct[]],
    [QueryResponse.ParsedQueryResponseStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "parseEthCallByTimestampQueryResponse"
  ): TypedContractMethod<
    [pcr: QueryResponse.ParsedPerChainQueryResponseStruct],
    [QueryResponse.EthCallByTimestampQueryResponseStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "parseEthCallQueryResponse"
  ): TypedContractMethod<
    [pcr: QueryResponse.ParsedPerChainQueryResponseStruct],
    [QueryResponse.EthCallQueryResponseStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "parseEthCallWithFinalityQueryResponse"
  ): TypedContractMethod<
    [pcr: QueryResponse.ParsedPerChainQueryResponseStruct],
    [QueryResponse.EthCallWithFinalityQueryResponseStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "proposalDeadline"
  ): TypedContractMethod<[proposalId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposalEta"
  ): TypedContractMethod<[proposalId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposalNeedsQueuing"
  ): TypedContractMethod<[proposalId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "proposalProposer"
  ): TypedContractMethod<[proposalId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "proposalSnapshot"
  ): TypedContractMethod<[proposalId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposalThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposalVotes"
  ): TypedContractMethod<
    [proposalId: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        againstVotes: bigint;
        forVotes: bigint;
        abstainVotes: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "propose"
  ): TypedContractMethod<
    [
      targets: AddressLike[],
      values: BigNumberish[],
      calldatas: BytesLike[],
      description: string
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "queue"
  ): TypedContractMethod<
    [
      targets: AddressLike[],
      values: BigNumberish[],
      calldatas: BytesLike[],
      descriptionHash: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "quorum"
  ): TypedContractMethod<[blockNumber: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "quorumDenominator"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "quorumNumerator(uint256)"
  ): TypedContractMethod<[timepoint: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "quorumNumerator()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "receiveWormholeMessages"
  ): TypedContractMethod<
    [
      payload: BytesLike,
      arg1: BytesLike[],
      sourceAddress: BytesLike,
      sourceChain: BigNumberish,
      arg4: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "relay"
  ): TypedContractMethod<
    [target: AddressLike, value: BigNumberish, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "responsePrefix"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setProposalThreshold"
  ): TypedContractMethod<
    [newProposalThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setVotingDelay"
  ): TypedContractMethod<[newVotingDelay: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVotingPeriod"
  ): TypedContractMethod<[newVotingPeriod: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "state"
  ): TypedContractMethod<[proposalId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "timelock"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateQuorumNumerator"
  ): TypedContractMethod<
    [newQuorumNumerator: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateTimelock"
  ): TypedContractMethod<[newTimelock: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "validateBlockNum"
  ): TypedContractMethod<
    [_blockNum: BigNumberish, _minBlockNum: BigNumberish],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "validateBlockTime"
  ): TypedContractMethod<
    [_blockTime: BigNumberish, _minBlockTime: BigNumberish],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "validateChainId"
  ): TypedContractMethod<
    [chainId: BigNumberish, _validChainIds: BigNumberish[]],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "validateEthCallData"
  ): TypedContractMethod<
    [
      r: QueryResponse.EthCallDataStruct,
      _expectedContractAddresses: AddressLike[],
      _expectedFunctionSignatures: BytesLike[]
    ],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "validateMultipleEthCallData"
  ): TypedContractMethod<
    [
      r: QueryResponse.EthCallDataStruct[],
      _expectedContractAddresses: AddressLike[],
      _expectedFunctionSignatures: BytesLike[]
    ],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyQueryResponseSignatures"
  ): TypedContractMethod<
    [response: BytesLike, signatures: IWormhole.SignatureStruct[]],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "votingDelay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "votingPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "wormhole"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCanceled"
  ): TypedContractEvent<
    ProposalCanceledEvent.InputTuple,
    ProposalCanceledEvent.OutputTuple,
    ProposalCanceledEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCreated"
  ): TypedContractEvent<
    ProposalCreatedEvent.InputTuple,
    ProposalCreatedEvent.OutputTuple,
    ProposalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalExecuted"
  ): TypedContractEvent<
    ProposalExecutedEvent.InputTuple,
    ProposalExecutedEvent.OutputTuple,
    ProposalExecutedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalQueued"
  ): TypedContractEvent<
    ProposalQueuedEvent.InputTuple,
    ProposalQueuedEvent.OutputTuple,
    ProposalQueuedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalThresholdSet"
  ): TypedContractEvent<
    ProposalThresholdSetEvent.InputTuple,
    ProposalThresholdSetEvent.OutputTuple,
    ProposalThresholdSetEvent.OutputObject
  >;
  getEvent(
    key: "QuorumNumeratorUpdated"
  ): TypedContractEvent<
    QuorumNumeratorUpdatedEvent.InputTuple,
    QuorumNumeratorUpdatedEvent.OutputTuple,
    QuorumNumeratorUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TimelockChange"
  ): TypedContractEvent<
    TimelockChangeEvent.InputTuple,
    TimelockChangeEvent.OutputTuple,
    TimelockChangeEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;
  getEvent(
    key: "VoteCastWithParams"
  ): TypedContractEvent<
    VoteCastWithParamsEvent.InputTuple,
    VoteCastWithParamsEvent.OutputTuple,
    VoteCastWithParamsEvent.OutputObject
  >;
  getEvent(
    key: "VotingDelaySet"
  ): TypedContractEvent<
    VotingDelaySetEvent.InputTuple,
    VotingDelaySetEvent.OutputTuple,
    VotingDelaySetEvent.OutputObject
  >;
  getEvent(
    key: "VotingPeriodSet"
  ): TypedContractEvent<
    VotingPeriodSetEvent.InputTuple,
    VotingPeriodSetEvent.OutputTuple,
    VotingPeriodSetEvent.OutputObject
  >;

  filters: {
    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProposalCanceled(uint256)": TypedContractEvent<
      ProposalCanceledEvent.InputTuple,
      ProposalCanceledEvent.OutputTuple,
      ProposalCanceledEvent.OutputObject
    >;
    ProposalCanceled: TypedContractEvent<
      ProposalCanceledEvent.InputTuple,
      ProposalCanceledEvent.OutputTuple,
      ProposalCanceledEvent.OutputObject
    >;

    "ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)": TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
    ProposalCreated: TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;

    "ProposalExecuted(uint256)": TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;
    ProposalExecuted: TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;

    "ProposalQueued(uint256,uint256)": TypedContractEvent<
      ProposalQueuedEvent.InputTuple,
      ProposalQueuedEvent.OutputTuple,
      ProposalQueuedEvent.OutputObject
    >;
    ProposalQueued: TypedContractEvent<
      ProposalQueuedEvent.InputTuple,
      ProposalQueuedEvent.OutputTuple,
      ProposalQueuedEvent.OutputObject
    >;

    "ProposalThresholdSet(uint256,uint256)": TypedContractEvent<
      ProposalThresholdSetEvent.InputTuple,
      ProposalThresholdSetEvent.OutputTuple,
      ProposalThresholdSetEvent.OutputObject
    >;
    ProposalThresholdSet: TypedContractEvent<
      ProposalThresholdSetEvent.InputTuple,
      ProposalThresholdSetEvent.OutputTuple,
      ProposalThresholdSetEvent.OutputObject
    >;

    "QuorumNumeratorUpdated(uint256,uint256)": TypedContractEvent<
      QuorumNumeratorUpdatedEvent.InputTuple,
      QuorumNumeratorUpdatedEvent.OutputTuple,
      QuorumNumeratorUpdatedEvent.OutputObject
    >;
    QuorumNumeratorUpdated: TypedContractEvent<
      QuorumNumeratorUpdatedEvent.InputTuple,
      QuorumNumeratorUpdatedEvent.OutputTuple,
      QuorumNumeratorUpdatedEvent.OutputObject
    >;

    "TimelockChange(address,address)": TypedContractEvent<
      TimelockChangeEvent.InputTuple,
      TimelockChangeEvent.OutputTuple,
      TimelockChangeEvent.OutputObject
    >;
    TimelockChange: TypedContractEvent<
      TimelockChangeEvent.InputTuple,
      TimelockChangeEvent.OutputTuple,
      TimelockChangeEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "VoteCast(address,uint256,uint8,uint256,string)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;

    "VoteCastWithParams(address,uint256,uint8,uint256,string,bytes)": TypedContractEvent<
      VoteCastWithParamsEvent.InputTuple,
      VoteCastWithParamsEvent.OutputTuple,
      VoteCastWithParamsEvent.OutputObject
    >;
    VoteCastWithParams: TypedContractEvent<
      VoteCastWithParamsEvent.InputTuple,
      VoteCastWithParamsEvent.OutputTuple,
      VoteCastWithParamsEvent.OutputObject
    >;

    "VotingDelaySet(uint256,uint256)": TypedContractEvent<
      VotingDelaySetEvent.InputTuple,
      VotingDelaySetEvent.OutputTuple,
      VotingDelaySetEvent.OutputObject
    >;
    VotingDelaySet: TypedContractEvent<
      VotingDelaySetEvent.InputTuple,
      VotingDelaySetEvent.OutputTuple,
      VotingDelaySetEvent.OutputObject
    >;

    "VotingPeriodSet(uint256,uint256)": TypedContractEvent<
      VotingPeriodSetEvent.InputTuple,
      VotingPeriodSetEvent.OutputTuple,
      VotingPeriodSetEvent.OutputObject
    >;
    VotingPeriodSet: TypedContractEvent<
      VotingPeriodSetEvent.InputTuple,
      VotingPeriodSetEvent.OutputTuple,
      VotingPeriodSetEvent.OutputObject
    >;
  };
}
